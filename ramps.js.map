{"version":3,"file":"ramps.js","sources":["../src/js/ramps.js"],"sourcesContent":["// import * as THREE from 'three';\r\n// import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n// // import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';\r\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n\r\n\r\n// function main() {\r\n//   const canvas = document.querySelector('#c');\r\n//   const renderer = new THREE.WebGLRenderer({canvas});\r\n\r\n//   const fov = 50;\r\n//   const aspect = 2;  //холст по умолчанию\r\n//   const near = 0.1;\r\n//   const far = 600;\r\n//   const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\r\n//   camera.position.set(50, 50, 100);\r\n\r\n//   const controls = new OrbitControls(camera, canvas);\r\n//   controls.target.set(0, 0, 0);\r\n//   controls.update();  \r\n\r\n\r\n//   const scene = new THREE.Scene();\r\n//   scene.background = new THREE.Color('black');\r\n\r\n\r\n//   {\r\n//     const skyColor = 0x4779F4;  // светло-синий\r\n//     const groundColor = 0x9E9E9E;  // коричневато-оранжевый\r\n//     const intensity = 1;\r\n//     const light = new THREE.HemisphereLight(skyColor, groundColor, intensity);\r\n//     scene.add(light);\r\n//   }\r\n\r\n//   {\r\n//     const color = 0x2DEF83;\r\n//     const intensity = 1;\r\n//     const light = new THREE.DirectionalLight(color, intensity);\r\n//     light.position.set(0, 10, 0);\r\n//     light.target.position.set(-5, 0, 0);\r\n//     scene.add(light);\r\n//     scene.add(light.target);\r\n//   }\r\n \r\n\r\n//   let ourObj;\r\n  \r\n//   const toRadians = (degrees) => degrees * (Math.PI / 180);\r\n//   {\r\n//     const gltfLoader = new GLTFLoader();\r\n//     const gltfPath = '/bowl.glb'; // Убедитесь, что путь правильный\r\n//     console.log(`Пытаемся загрузить ${gltfPath}`);\r\n//     gltfLoader.load(gltfPath, (gltf) => {\r\n//       console.log('Объект успешно загружен');\r\n//       ourObj = gltf.scene;\r\n//       scene.add(ourObj);\r\n//       ourObj.rotation.y = toRadians(10);\r\n//       ourObj.scale.set(0.5, 0.5, 0.5);\r\n\r\n//     }, undefined, (error) => {\r\n//       console.error(`Произошла ошибка при загрузке ${gltfPath}`, error);\r\n//     });\r\n\r\n\r\n//   }\r\n\r\n\r\n//   {\r\n//     const gltfLoader = new GLTFLoader();\r\n//     const gltfPath2 = '/mini.glb'; // Убедитесь, что путь правильный\r\n//     console.log(`Пытаемся загрузить ${gltfPath2}`);\r\n//     gltfLoader.load(gltfPath2, (gltf) => {\r\n//       console.log('Второй объект успешно загружен');\r\n//       const secondObj = gltf.scene;\r\n//       scene.add(secondObj);\r\n//       secondObj.position.set(30, 30, 0); // Устанавливаем позицию второго объекта\r\n//     }, undefined, (error) => {\r\n//       console.error(`Произошла ошибка при загрузке ${gltfPath2}`, error);\r\n//     });\r\n//   }\r\n  \r\n//   function resizeRendererToDisplaySize(renderer) {\r\n//     const canvas = renderer.domElement;\r\n//     const width = canvas.clientWidth;\r\n//     const height = canvas.clientHeight;\r\n//     const needResize = canvas.width !== width || canvas.height !== height;\r\n//     if (needResize) {\r\n//       renderer.setSize(width, height, false);\r\n//     }\r\n//     return needResize;\r\n//   }\r\n\r\n//   function render() {\r\n\r\n//     if (resizeRendererToDisplaySize(renderer)) {\r\n//       const canvas = renderer.domElement;\r\n//       camera.aspect = canvas.clientWidth / canvas.clientHeight;\r\n//       camera.updateProjectionMatrix();\r\n//     }\r\n \r\n//     renderer.render(scene, camera);\r\n\r\n    \r\n//     requestAnimationFrame(render);\r\n\r\n\r\n//     renderer.render(scene, camera);\r\n//   }\r\n\r\n//   requestAnimationFrame(render);\r\n// }\r\n\r\n// main();\r\n\r\nimport * as THREE from 'three';\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\r\n\r\nlet sceneManagers = [];\r\n\r\nclass SceneManager {\r\n  constructor(canvasId, modelPath) {\r\n    console.log(`Инициализация SceneManager для canvasId: ${canvasId} и modelPath: ${modelPath}`);\r\n    this.canvas = document.querySelector(canvasId);\r\n    if (!this.canvas) {\r\n      console.error(`Canvas с ID ${canvasId} не найден`);\r\n      return;\r\n    }\r\n    this.renderer = new THREE.WebGLRenderer({ canvas: this.canvas, antialias: true });\r\n    this.renderer.setPixelRatio(window.devicePixelRatio);\r\n    this.renderer.setSize(this.canvas.clientWidth, this.canvas.clientHeight);\r\n    console.log('Renderer успешно инициализирован');\r\n\r\n    this.camera = new THREE.PerspectiveCamera(50, this.canvas.clientWidth / this.canvas.clientHeight, 0.1, 600);\r\n    this.camera.position.set(15, 5, 17);\r\n    console.log('Камера успешно инициализирована');\r\n\r\n    this.scene = new THREE.Scene();\r\n    console.log('Сцена успешно инициализирована');\r\n\r\n    this.addLights();\r\n    this.loadModel(modelPath);\r\n\r\n    this.isMouseOver = false;\r\n    this.canvas.addEventListener('mousemove', (event) => this.onMouseMove(event));\r\n    this.canvas.addEventListener('mouseleave', () => this.isMouseOver = false);\r\n    this.canvas.addEventListener('mouseenter', () => this.isMouseOver = true);\r\n\r\n    window.addEventListener('resize', () => this.onWindowResize(), false);\r\n\r\n    // Добавление текущего экземпляра в массив\r\n    sceneManagers.push(this);\r\n  }\r\n\r\n  addLights() {\r\n    console.log('Добавляем освещение');\r\n    const skyColor = 0x4779F4;\r\n    const groundColor = 0x9E9E9E;\r\n    const intensity = 1;\r\n    const hemisphereLight = new THREE.HemisphereLight(skyColor, groundColor, intensity);\r\n    this.scene.add(hemisphereLight);\r\n\r\n    const color = 0x2DEF83;\r\n    const directionalLight = new THREE.DirectionalLight(color, intensity);\r\n    directionalLight.position.set(0, 10, 0);\r\n    directionalLight.target.position.set(-5, 0, 0);\r\n    this.scene.add(directionalLight);\r\n    this.scene.add(directionalLight.target);\r\n    console.log('Освещение добавлено');\r\n  }\r\n\r\n  loadModel(modelPath) {\r\n    console.log(`Пытаемся загрузить модель из ${modelPath}`);\r\n    const gltfLoader = new GLTFLoader();\r\n    gltfLoader.load(modelPath, (gltf) => {\r\n      console.log('Объект успешно загружен');\r\n\r\n      this.modelGroup = new THREE.Group();\r\n      this.scene.add(this.modelGroup);\r\n\r\n      this.model = gltf.scene;\r\n      this.modelGroup.add(this.model);\r\n\r\n      // Предполагаем, что модель состоит из нескольких частей\r\n      this.parts = [];\r\n      this.model.traverse((child) => {\r\n        if (child.isMesh) {\r\n          this.parts.push(child);\r\n          // Сохраняем начальную позицию\r\n          child.userData.initialPosition = child.position.clone();\r\n          // Разбрасываем по оси Z\r\n          child.position.z += Math.random() * 20 - 10;\r\n          child.userData.scatteredPosition = child.position.clone();\r\n        }\r\n      });\r\n\r\n      console.log('Добавляем объект в сцену');\r\n    }, undefined, (error) => {\r\n      console.error(`Произошла ошибка при загрузке ${modelPath}`, error);\r\n    });\r\n  }\r\n\r\n  onMouseMove(event) {\r\n    const canvasRect = this.canvas.getBoundingClientRect();\r\n    const canvasX = event.clientX - canvasRect.left;\r\n    const canvasY = event.clientY - canvasRect.top;\r\n\r\n    const normalizedX = (canvasX / this.canvas.clientWidth) * 2 - 1; // нормализуем координаты канваса\r\n    const normalizedY = -(canvasY / this.canvas.clientHeight) * 2 + 1;\r\n\r\n    const raycaster = new THREE.Raycaster();\r\n    raycaster.setFromCamera({ x: normalizedX, y: normalizedY }, this.camera);\r\n    raycaster.far = 50; // увеличиваем расстояние действия луча\r\n\r\n    const intersects = raycaster.intersectObjects(this.scene.children, true);\r\n\r\n    if (intersects.length > 0) {\r\n      const object = intersects[0].object;\r\n      if (object.userData.initialPosition) {\r\n        const initialPosition = object.userData.initialPosition;\r\n        object.position.lerp(initialPosition, 0.3); // увеличиваем скорость сборки\r\n      }\r\n    }\r\n  }\r\n\r\n  onWindowResize() {\r\n    const canvas = this.renderer.domElement;\r\n    const width = canvas.clientWidth;\r\n    const height = canvas.clientHeight;\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n      this.renderer.setSize(width, height, false);\r\n      this.camera.aspect = width / height;\r\n      this.camera.updateProjectionMatrix();\r\n    }\r\n  }\r\n\r\n  updatePartsPositions(scrollPercentage) {\r\n    if (!this.parts) return;\r\n\r\n    this.parts.forEach((part) => {\r\n      const initialPosition = part.userData.initialPosition;\r\n      // Анимируем части от начальной позиции к позиции (0,0,0)\r\n      part.position.lerpVectors(initialPosition, new THREE.Vector3(0, 0, 0), scrollPercentage);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    this.onWindowResize();\r\n    this.renderer.render(this.scene, this.camera);\r\n  }\r\n}\r\n\r\nfunction animate() {\r\n  sceneManagers.forEach(manager => manager.render());\r\n  requestAnimationFrame(animate);\r\n}\r\n\r\nfunction main() {\r\n  console.log('Запуск main функции');\r\n  new SceneManager('#c1', '/mini.glb');\r\n\r\n  animate();\r\n\r\n  window.addEventListener('scroll', () => {\r\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n    const docHeight = document.documentElement.scrollHeight - window.innerHeight;\r\n    const scrollPercentage = scrollTop / docHeight;\r\n\r\n    sceneManagers.forEach(manager => manager.updatePartsPositions(scrollPercentage));\r\n  });\r\n}\r\n\r\nmain();\r\n"],"names":["sceneManagers","SceneManager","canvasId","modelPath","THREE.WebGLRenderer","THREE.PerspectiveCamera","THREE.Scene","event","skyColor","groundColor","intensity","hemisphereLight","THREE.HemisphereLight","color","directionalLight","THREE.DirectionalLight","GLTFLoader","gltf","THREE.Group","child","error","canvasRect","canvasX","canvasY","normalizedX","normalizedY","raycaster","THREE.Raycaster","intersects","object","initialPosition","canvas","width","height","scrollPercentage","part","THREE.Vector3","animate","manager","main","scrollTop","docHeight"],"mappings":"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"}